#!/usr/bin/env python2
# -*- coding: utf-8 -*- #
# @偏有宸机_Exploit-Template
# Exploiting: python exploit.py [IP PORT] [Exploit_Template]
# Edit values:
#      - RemPro()
#           - elf_addr
#           - pro_libc
#           - enable_Onegadgets
#      - exp()

import os
import sys
import subprocess
from pwn import *
from one_gadget import generate_one_gadget 
context.terminal = ["tmux","new-window"]
# context.terminal = ["tmux","splitw","-h"]
# context.arch = "amd64"
context.arch = "i386"
# context.log_level = "debug"

### 远程本地连接
def RemPro(ip='',port=''):
    global sh,elf,libc,one_ggs
    elf_addr = "./pwn"                                   # 本地ELF
    pro_libc = "/lib/x86_64-linux-gnu/libc.so.6"       # Libc文件
    rem_libc = "/media/psf/DA1SY/Tools/Pwn-tools/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc-2.23.so"
    if len(sys.argv) > 2 :
        sh = remote(sys.argv[1],sys.argv[2])
        try:
            libc = ELF(rem_libc)
            pro_libc = rem_libc
        except:
            log.info("No set Remote_libc...")
            libc = ELF(pro_libc)
    else:
        libc = ELF(pro_libc)
        try:
            sh = remote(ip,port)
            libc = ELF(rem_libc)
            pro_libc = rem_libc
            log.info("Remote Start...")
        except:
            sh = process(elf_addr)
            log.info("Local Start...")
    # one_ggs = [0x45226, 0x4527a, 0xf0364,0xf1207]
    # one_ggs = one_gadget(pro_libc)
    elf = ELF(elf_addr)
    return 1

### 调试用
def debug(cmd=""):
    if len(sys.argv) <= 2:
        log.progress("Loading Debug....")
        gdb.attach(sh,cmd)
### One_Gadget
# def one_gadget(filename):
#     log.progress("Leak One_Gadgets...")
#     one_ggs = str(subprocess.check_output(['one_gadget', '--raw', '-f',filename]))[2:-3].split(' ')
#     return list(map(int,one_ggs))
def one_gadget(libc_addr):
    log.progress("Leak One_Gadgets...")
    path_to_libc=libc_addr
    gadget =[]
    for offset in generate_one_gadget(path_to_libc):
        gadget.append(int(offset))
    return gadget
    # one_gg = one_gadget("/lib/x86_64-linux-gnu/libc.so.6")

def exp():

   	"""
   	...EXP...
    success("info_success")								# 正确提示信息
    info("info_info")									# 提示信息
    info.progress("info_progress")						# 加载信息
    debug()												# 加载GDB调试
   	"""

    return sh
    
def exp_2():
    print("this is exp_2")

    
if __name__=="__main__":
    RemPro()
    if len(sys.argv) > 3 :
        eval(sys.argv[3])()
    elif (len(sys.argv)>1 and len(sys.argv)<3):
        eval(sys.argv[1])()
    else:
        exp()
    sh.interactive()
    

